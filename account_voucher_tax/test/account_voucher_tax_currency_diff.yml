-
  Test Currency diff
-
  Update account config settings multi-currency
-
  !python {model: account.config.settings}: |
    company_id = self.pool.get('res.users').browse(cr, uid, uid, context=context).company_id.id
    date_start, date_stop, month = self._get_default_fiscalyear_data(
            cr, uid, company_id, context=context)
    account_conf_id = self.create(cr, uid, {'date_start': date_start, 'date_stop': date_stop, 'period': month,'group_multi_currency': True})
    self.execute(cr, uid, [account_conf_id])
-
  I set the income and expense currency accounts on the main company
-
  !python {model: res.company}: |
    from datetime import datetime
    vals = {
      'income_currency_exchange_account_id': ref('account.o_expense'),
      'expense_currency_exchange_account_id': ref('account.o_expense')}
    self.write(cr, uid, ref('base.main_company'), vals)
-
    Update rate of USD to $12.00
-
  !record {model: res.currency.rate, id: rateUSD_01_02}:
    rate: 0.083333
    currency_id: base.USD
    name: !eval time.strftime('%Y-01-02')
-
  I set the context as would do the action in supplier invoice menuitem
-
  !context
    'default_type': 'in_invoice'
-
  I create a supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier_tax_currency_diff_1, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    company_id: base.main_company
    currency_id: base.USD
    date_invoice: !eval time.strftime('%Y-01-02')
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 2.88
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id:
            - account_voucher_tax_purchase_iva16
    journal_id: account.expenses_journal
    partner_id: base.res_partner_18
    reference_type: none
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_tax_currency_diff_1}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_tax_currency_diff_1}:
    - state == 'open'
-
    Update rate of USD to $13.00
-
  !record {model: res.currency.rate, id: rateUSD_02_02}:
    rate: 0.076923
    currency_id: base.USD
    name: !eval time.strftime('%Y-02-02')
-
  I set the context that will be used for the encoding of all the vouchers of this file
-
  !context
    'type': 'payment'
-
  I create the voucher of payment01 with values 3.34
-
  !record {model: account.voucher, id: account_voucher_tax_currency_diff_1, view: account_voucher.view_vendor_payment_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 3.34
    journal_id: account.bank_journal_usd
    name: 'Payment01_currency_diff'
    partner_id: base.res_partner_18
    date: !eval time.strftime("%Y-02-02")
    type: 'payment'
-
  I click to validate button on voucher
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_tax_currency_diff_1}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_tax_currency_diff_1}:
    - state == 'posted'
-
    I check account move line of invoice
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_supplier_tax_currency_diff_1')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    debit=0
    credit=0
    for move in moves_line :
        print move.account_id.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name ,'\t',move.name
        debit+=move.debit
        credit+=move.credit
    print '\n\tdebit: ', debit , '\t credit: ',credit
-
    I check account move line of payment1
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_tax_currency_diff_1')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    debit=0
    credit=0
    for move in moves_line :
        print move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name,'\t',move.account_id.name,'\t',move.name 
        debit+=move.debit
        credit+=move.credit
    print '\n\tdebit: ', debit , '\t credit: ',credit
