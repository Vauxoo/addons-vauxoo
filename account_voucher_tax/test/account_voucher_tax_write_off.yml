-
  Test Write off
-
  I set the context as would do the action in supplier invoice menuitem
-
  !context
    'default_type': 'in_invoice'
-
  I create a supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier_tax_write_off_1, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 2.88
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id:
            - account_voucher_tax_purchase_iva16
    journal_id: account.expenses_journal
    partner_id: base.res_partner_23
    reference_type: none
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_tax_write_off_1}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_tax_write_off_1}:
    - state == 'open'
-
  I set the context that will be used for the encoding of all the vouchers of this file
-
  !context
    'type': 'payment'
-
  I create the voucher of payment01 with values 3.37
-
  !record {model: account.voucher, id: account_voucher_tax_write_off_1, view: account_voucher.view_vendor_payment_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 3.37
    journal_id: account.bank_journal
    name: 'Payment01_write_off'
    partner_id: base.res_partner_23
    date: !eval time.strftime("%Y-%m-%d")
    type: 'payment'
-
  I click to validate button on voucher
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_tax_write_off_1}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_tax_write_off_1}:
    - state == 'posted'
-
    I check account move line of invoice
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_supplier_tax_write_off_1')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    debit=0
    credit=0
    for move in moves_line :
        if move.credit == 3.34:
            print move.account_id.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name ,'\t',move.name
            assert move.account_id.id == ref('account.a_pay'), "Wrong account Creditors in Journal Item"
        elif move.debit == 0.46:
            print move.account_id.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name ,'\t',move.name
            assert move.account_id.id == ref('account_iva_voucher_16'), "Wrong account IVA Voucher in Journal Item"
        elif move.debit == 2.88:
            print move.account_id.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name ,'\t',move.name
            assert move.account_id.id == ref('account.a_expense'), "Wrong bank account in Journal Item"
        else:
            assert False, "Wrong entry. Unrecognized account move line for invoce."
        debit+=move.debit
        credit+=move.credit
    print '\n\tdebit: ', debit , '\t credit: ',credit
    assert debit==credit , 'Wrong in credit or debit in invoice'
-
    I check account move line of payment1
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_tax_write_off_1')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    debit=0
    credit=0
    for move in moves_line :
        if move.tax_id:
            if move.credit == 0.46:
                print move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name,'\t',move.account_id.name,'\t',move.name 
                assert move.account_id.id == ref('account_iva_voucher_16'), "Wrong account Creditors in Journal Item"
            elif move.debit == 0.46:
                print move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name,'\t',move.account_id.name,'\t',move.name 
                assert move.account_id.id == ref('account_iva_voucher'), "Wrong account IVA Voucher in Journal Item"
            else:
                assert False, "Wrong entry. Unrecognized account move line for payment 1."
            debit+=move.debit
            credit+=move.credit
    print '\n\tdebit: ', debit , '\t credit: ',credit
    assert debit==credit , 'Wrong test write off failed'
