-
  Test sale order of products can be sold
-
    Create sale order, picking in and invoice by product
-
  !python {model: sale.order}: |
    from openerp import tools
    from openerp import netsvc
    import os
    import tempfile
    import csv
    
    company_id = self.pool.get('res.users').browse(
                            cr, uid, uid, context=context).company_id.id
    res_partner_obj = self.pool.get('res.partner')
    product_obj = self.pool.get('product.product')
    sale_order_line_obj = self.pool.get('sale.order.line')
    account_invoice_obj = self.pool.get('account.invoice')
    account_invoice_line_obj = self.pool.get('account.invoice.line')
    stock_picking_out_object = self.pool.get('stock.picking.out')
    product_ids = product_obj.search(cr, uid, [('sale_ok','=','True'), 
                                               ('active','=','True'), 
                                               ('company_id','=',company_id)])
    invoice_id = None
    partner_id = None
    products_tax_not_fund = []
    tmp_path = tempfile.gettempdir()
    partner_ids = res_partner_obj.search(cr, uid, [('customer','=','True'),
                                                   ('company_id','=',company_id)])
    if partner_ids:
        for partner in partner_ids:
            data = res_partner_obj.browse(cr, uid , [partner])[0]
            if data.property_account_receivable.type == 'receivable' :
                partner_id = data.id
                break
    try:
        f_write_ProductLog_csv = open(os.path.join(tmp_path, 'sale_order_product_log.csv'), 'wb')
        fcsv_csv_ProductLog = csv.DictWriter(f_write_ProductLog_csv, 
            ['id', 'name', 'name_category', 'error' ,], delimiter=',')
        fcsv_csv_ProductLog.writerow({'id':'id', 'name':'name', 'name_category':'name_category', 'error':'error' })
            
        f_write_Log_csv = open(os.path.join(tmp_path, 'sale_order_general_log.csv'), 'wb')
        fcsv_csv_Log = csv.DictWriter(f_write_Log_csv, ['error' ,'localization' ,'product_id'], delimiter=',')
        fcsv_csv_Log.writerow({'error': 'error', 'localization':'localization' ,'product_id': 'product_id'})
        
    except Exception, e:
        fcsv_csv_Log.writerow({'error' : tools.ustr(e).replace('\n', ''), 'localization':'Error create files'})
    
    if not partner_id:
        fcsv_csv_Log.writerow({'error' : 'Wrong, You can not generate a sale without a partner'})
        
    assert  partner_id , 'Wrong, You can not generate a sale without a partner'
    
    if product_ids:
        for product_id in product_ids:
            product_data = product_obj.browse(cr, uid , [product_id])
            #~ Data of sale order
            sale_order_data = self.onchange_partner_id(cr, uid, [], partner_id, context=context)['value']
            sale_order_data.update({'picking_policy': 'direct','partner_id': partner_id,'order_policy': 'manual',})  
            
            #~ Data of sale order line
            sale_order_line_data = sale_order_line_obj.product_id_change(cr, uid, [], sale_order_data.get('pricelist_id'), product_id, qty=1,
                uom=False, qty_uos=0, uos=False, name='', partner_id=partner_id,
                lang=False, update_tax=True, date_order=False, packaging=False, fiscal_position=False, flag=False, context=context)['value']

            #~ Added taxes of product
            taxes_ids = product_data[0].taxes_id
            sale_order_line_data.update({'product_id': product_id, 'tax_id': [(4, tax.id) for tax in taxes_ids]})
            
            #~ Added data of sale_order_line_data in sale_order_data
            sale_order_data.update({'order_line': [(0, 0, sale_order_line_data )]})
            
            try:
                #~ Create sale order with this product
                sale_order_id = self.create(cr, uid, sale_order_data )
            except Exception, e:
                fcsv_csv_Log.writerow({'error' : tools.ustr(e).replace('\n', ''), 'localization': 'Create sale order', 'product_id' : repr(product_id)})

            #~ Click button Confirm
            if sale_order_id:
                try:
                    self.action_button_confirm(cr, uid, [sale_order_id],context=context)
                except Exception, e:
                    fcsv_csv_Log.writerow({'error' : tools.ustr(e).replace('\n', ''), 'localization': 'Confirm sale order', 'product_id' : repr(product_id)})

            #~  Chech picking out by sale order
            if not product_data[0].type == 'service' :
                try:
                    stock_picking_out_ids = stock_picking_out_object.search(cr, uid, [('sale_id','=',sale_order_id)])
                    assert len(stock_picking_out_ids) > 0 ,  'Wrong. Stock picking out not fund'
                except Exception, e:
                    fcsv_csv_Log.writerow({'error' : tools.ustr(e).replace('\n', ''), 'localization': 'Check picking out', 'product_id' : repr(product_id)})
            
            #~ Create invoice for this sale order
            try:
                #~ cr.execute("SAVEPOINT sale_order_savepoint")
                obj_sapi = self.pool.get('sale.advance.payment.inv')
                ctx = context.copy()
                ctx.update({"active_model": 'sale.order', "active_ids": [sale_order_id], "active_id": sale_order_id , 'open_invoices': True})
                pay_id = obj_sapi.create(cr, uid, {'advance_payment_method': 'all'})
                invoice_id = obj_sapi.create_invoices(cr, uid, [pay_id], context=ctx)
                #~ cr.execute("RELEASE SAVEPOINT sale_order_savepoint")
            except Exception, e:
                #~ cr.execute("ROLLBACK TO SAVEPOINT sale_order_savepoint")
                fcsv_csv_ProductLog.writerow({'id':repr(product_data[0].id), 
                                                'name': product_data[0].name.encode('utf8').replace(',','.'),
                                                'name_category': product_data[0].categ_id.name.encode('utf8').replace(',','.'), 
                                                'error': tools.ustr(e).replace('\n', '')})
            #~ Validate invoice for this sale order 
            if invoice_id:
                try:
                    wf_service = netsvc.openerp.workflow
                    wf_service.trg_validate(uid, 'account.invoice', invoice_id.get('res_id') , 'invoice_open', cr)
                except Exception, e:
                    fcsv_csv_Log.writerow({'error' : tools.ustr(e).replace('\n', ''), 'localization': 'Validate Invoice',  'product_id' : repr(product_id)})

        f_write_ProductLog_csv.close()
        f_write_Log_csv.close()
        assert len(products_tax_not_fund) == 0 , 'Wrong. Some products not have tax : %s' % (products_tax_not_fund)
    
