-
    CASE 2 Test for check advance less than payment
-
  I change context account invoice.
-
  !python {model: account.invoice}: |
    context.update({'default_type': 'in_invoice'})
-
  I create a supplier invoice 04
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice04, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-05-14')
    date_due: !eval time.strftime('%Y-06-17')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 400.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.expenses_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice04'
    residual : 400
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice04}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice04}:
    - state == 'open'
-
  I create a supplier invoice 05
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice05, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-05-18')
    date_due: !eval time.strftime('%Y-07-01')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 200.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.expenses_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice05'
    residual : 200
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice05}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice05}:
    - state == 'open'
-
  I create a supplier invoice 06
-
  !record {model: account.invoice, id: account_invoice_supplier_invoice06, view: account.invoice_supplier_form}:
    account_id: account.a_pay
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-05-22')
    date_due: !eval time.strftime('%Y-06-29')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 300.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.expenses_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice06'
    residual : 300
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier_invoice06}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier_invoice06}:
    - state == 'open'
-
  I change context supplier advance reconciliation.
-
  !python {model: account.reconcile.advance}: |
    context.update({'default_type':'pay'})
-
  I create a supplier advance reconciliation
-
  !record {model: account.reconcile.advance, id: account_reconcile_advance_ara02, view: account_reconcile_advance.account_reconcile_advance_supplier_form }:
    name: ARA_02
    date: !eval time.strftime("%Y-07-20")
    date_post: !eval time.strftime("%Y-07-01")
    partner_id: base.res_partner_18
    journal_id: account.miscellaneous_journal
-
  I added invoices and vouchers. Click button Reconcile
-
  !python {model: account.reconcile.advance}: |
    invoice_ids = self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_supplier_invoice04'), ref('account_invoice_supplier_invoice05'), ref('account_invoice_supplier_invoice06')])
    voucher_ids = self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_payment01')])
    self.write(cr, uid, [ref("account_reconcile_advance_ara02")], {'invoice_ids': [(6,0,[invoice.id for invoice in invoice_ids])] , 'voucher_ids': [(6,0,[voucher.id for voucher in voucher_ids])] })
    self.payment_reconcile(cr, uid, [ref("account_reconcile_advance_ara02")],context=context)
-
  I check that supplier advance reconciliation is now "Done".
-
  !assert {model: account.reconcile.advance, id: account_reconcile_advance_ara02}:
    - state == 'done'
-
  I check account move line after of ARA_02 
-
  !python {model: account.move.line}: |
    moves_ids = self.search( cr, uid, [('move_id','=',self.pool.get('account.reconcile.advance').browse(cr, uid, [ref('account_reconcile_advance_ara02')])[0].move_id.id)])
    moves = self.browse(cr, uid, moves_ids)
    for move in moves :
        if move.name == 'Advance Applied':
            print move.name ,'\t\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
        else:
            print move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
-
  I check account vouchers of payments
-
  !python {model: account.voucher}: |
    voucher_ids = self.browse(cr, uid, [ref('account_voucher_payment01')])
    for voucher in voucher_ids :
        if voucher.amount == 500:
            print voucher.name,'\t',voucher.date,'\t', voucher.partner_id.name,'\t', voucher.amount,'\t',voucher.advance
            assert voucher.advance == False , "Wrong in Payment03"
        else:
            assert False, "Wrong entry. Unrecognized account voucher."
-
    I check account move line of payments
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_payment01')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    for move in moves_line :
        if move.debit == 500:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of Payment03 (Debit)"
        elif move.credit == 500:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of Payment03 (Credit)"
        else:
            assert False, "Wrong entry. Unrecognized in account move line."
-
  I check account vouchers of invoices
-
  !python {model: account.invoice}: |
    invoice_ids = self.browse(cr, uid, [ref('account_invoice_supplier_invoice04'), ref('account_invoice_supplier_invoice05'), ref('account_invoice_supplier_invoice06')])
    for invoice in invoice_ids :
        if invoice.amount_total == 400:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state, '\t',invoice.payment_ids[0].debit,'\t',invoice.residual
            assert invoice.state == 'paid' and invoice.payment_ids[0].debit == 400 and invoice.residual == 0, "Wrong in Invoice04"
        elif invoice.amount_total == 200:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state, '\t\t', invoice.residual
            assert invoice.state == 'open' and invoice.residual == 200, "Wrong in Invoice05"
        elif invoice.amount_total == 300:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state, '\t',invoice.payment_ids[0].debit,'\t',invoice.residual
            assert invoice.state == 'open' and invoice.payment_ids[0].debit == 100 and invoice.residual == 200, "Wrong in Invoice06"
        else:
            assert False, "Wrong entry. Unrecognized account invoice."
-
    I check account move line of invoices
-
  !python {model: account.move.line}: |
    payments_ids=self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_supplier_invoice04'), ref('account_invoice_supplier_invoice05'), ref('account_invoice_supplier_invoice06')])
    tuple_payments=[ payment.move_id.id for payment in payments_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_payments))])
    moves_line = self.browse (cr,uid, moves_ids)
    for move in moves_line :
        if move.debit == 400:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of Invoice04 (Debit)"
        elif move.credit == 400:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice04 (Credit)"
        elif move.debit == 200:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name== None and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice05 (Debit)"
        elif move.credit == 200:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice05 (Credit)"
        elif move.debit == 300:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name== None and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice06 (Debit)"
        elif move.credit == 300:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name , "Wrong in account move line of Inovice06 (Credit)"
        else:
            assert False, "Wrong entry. Unrecognized in account move line."
