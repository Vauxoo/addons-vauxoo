-
    CASE 1 Test for check advance greater than receipt (Customer)
-
  I create the first voucher of receipt with values 500 customer 1
-
  !record {model: account.voucher, id: account_voucher_receipt01_customer, view: account_voucher.view_vendor_receipt_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 500
    journal_id: account.bank_journal
    name: 'receiptCustomer01'
    partner_id: base.res_partner_18
    date: !eval time.strftime('%Y-02-28')
    payment_option: 'without_writeoff'
    type : 'receipt'
    advance : True
-
    Set amount 0 in credit & debit lines of voucher
-
  !python {model: account.voucher}: |
    voucher_id = self.browse(cr, uid, ref('account_voucher_receipt01_customer'))
    line_ids = [item.id for item in voucher_id.line_cr_ids] + [item.id for item in voucher_id.line_dr_ids]
    self.pool.get('account.voucher.line').write(cr, uid, line_ids, {'amount': 0})
-
  I click to validate button on voucher receipt01
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_receipt01_customer}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_receipt01_customer}:
    - state == 'posted'
-
  I create the second voucher of receipt with values 1000 customer 1
-
  !record {model: account.voucher, id: account_voucher_receipt02_customer, view: account_voucher.view_vendor_receipt_form}:
    account_id: account.cash
    company_id: base.main_company
    amount: 1000
    journal_id: account.bank_journal
    name: 'receiptCustomer02'
    partner_id: base.res_partner_18
    date: !eval time.strftime('%Y-02-15')
    payment_option: 'without_writeoff'
    type : 'receipt'
    advance : True
-
    Set amount 0 in credit & debit lines of voucher
-
  !python {model: account.voucher}: |
    voucher_id = self.browse(cr, uid, ref('account_voucher_receipt02_customer'))
    line_ids = [item.id for item in voucher_id.line_cr_ids] + [item.id for item in voucher_id.line_dr_ids]
    self.pool.get('account.voucher.line').write(cr, uid, line_ids, {'amount': 0})
-
  I click to validate button on voucher receipt02
-
  !workflow {model: account.voucher, action: proforma_voucher, ref: account_voucher_receipt02_customer}
-
  I check that the voucher state is now "Posted"
-
  !assert {model: account.voucher, id: account_voucher_receipt02_customer}:
    - state == 'posted'
-
  I create a customer invoice 01
-
  !record {model: account.invoice, id: account_invoice_customer_invoice01}:
    account_id: account.a_recv
    check_total: 100.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-03-11')
    date_due: !eval time.strftime('%Y-06-14')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 100.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.sales_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice01_customer'
    residual : 100
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_invoice01}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_customer_invoice01}:
    - state == 'open'
-
  I create a supplier invoice 02
-
  !record {model: account.invoice, id: account_invoice_customer_invoice02}:
    account_id: account.a_recv
    check_total: 200.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-04-26')
    date_due: !eval time.strftime('%Y-06-11')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 200.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.sales_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice02_customer'
    residual : 200
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_invoice02}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_customer_invoice02}:
    - state == 'open'
-
  I create a supplier invoice 03
-
  !record {model: account.invoice, id: account_invoice_customer_invoice03, view:  account.invoice_form }:
    account_id: account.a_recv
    check_total: 300.0
    company_id: base.main_company
    date_invoice: !eval time.strftime('%Y-05-08')
    date_due: !eval time.strftime('%Y-06-05')
    currency_id: base.EUR
    invoice_line:
      - account_id: account.a_expense
        name: '[PC1] Basic PC'
        price_unit: 300.0
        product_id: product.product_product_5
        quantity: 1.0
        invoice_line_tax_id: []
    journal_id: account.sales_journal
    partner_id: base.res_partner_18
    reference_type: none
    name: 'Invoice03_customer'
    residual : 300
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_invoice03}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_customer_invoice03}:
    - state == 'open'
-
  I change context supplier advance reconciliation.
-
  !python {model: account.reconcile.advance}: |
    context.update({'default_type':'rec'})
-
    I create a supplier advance reconciliation
-
  !record {model: account.reconcile.advance, id: account_reconcile_advance_ara01_customer, view:  account_reconcile_advance.account_reconcile_advance_supplier_form }:
    name: ARA_01_Customer
    date: !eval time.strftime("%Y-07-18")
    date_post: !eval time.strftime("%Y-06-27")
    partner_id: base.res_partner_18
    journal_id: account.miscellaneous_journal
-
  I added invoices and vouchers. Click button Reconcile
-
  !python {model: account.reconcile.advance}: |
    invoice_ids = self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_customer_invoice01'), ref('account_invoice_customer_invoice02'), ref('account_invoice_customer_invoice03')])
    voucher_ids = self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_receipt01_customer'), ref('account_voucher_receipt02_customer')])
    self.write(cr, uid, [ref("account_reconcile_advance_ara01_customer")], {'invoice_ids': [(6,0,[invoice.id for invoice in invoice_ids])] , 'voucher_ids': [(6,0,[voucher.id for voucher in voucher_ids])] })
    self.payment_reconcile(cr, uid, [ref("account_reconcile_advance_ara01_customer")])
-
  I check that supplier advance reconciliation is now "Done".
-
  !assert {model: account.reconcile.advance, id: account_reconcile_advance_ara01_customer}:
    - state == 'done'
-
  I check account move line after of ARA_01_customer
-
  !python {model: account.move.line}: |
    moves_ids = self.search( cr, uid, [('move_id','=',self.pool.get('account.reconcile.advance').browse(cr, uid, [ref('account_reconcile_advance_ara01_customer')])[0].move_id.id)])
    moves = self.browse(cr, uid, moves_ids)
    for move in moves :
        if move.name == 'Advance Applied':
            print move.name ,'\t\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
        else:
            print move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
-
  I check account vouchers of receipts
-
  !python {model: account.voucher}: |
    voucher_ids = self.browse(cr, uid, [ref('account_voucher_receipt01_customer'), ref('account_voucher_receipt02_customer')])
    for voucher in voucher_ids :
        if voucher.amount == 500:
            print voucher.name,'\t',voucher.date,'\t', voucher.partner_id.name,'\t', voucher.amount,'\t',voucher.advance
            assert voucher.advance == True , "Wrong in receipt01"
        elif voucher.amount == 1000:
            print voucher.name,'\t',voucher.date,'\t', voucher.partner_id.name,'\t', voucher.amount,'\t',voucher.advance
            assert voucher.advance == False , "Wrong in receipt02"
        else:
            assert False, "Wrong entry. Unrecognized account voucher."
-
    I check account move line of receipts
-
  !python {model: account.move.line}: |
    receipts_ids=self.pool.get('account.voucher').browse(cr, uid, [ref('account_voucher_receipt01_customer'), ref('account_voucher_receipt02_customer')])
    tuple_receipts=[ receipt.move_id.id for receipt in receipts_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_receipts))])
    moves_line = self.browse (cr,uid, moves_ids)
    for move in moves_line :
        if move.debit == 500:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of receipt01 (Debit)"
        elif move.credit == 500:
            print move.account_id.name,'\t',move.name ,'\t\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of receipt01 (Credit)"
        elif move.debit == 1000:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of receipt02 (Debit)"
        elif move.credit == 1000:
            print move.account_id.name,'\t',move.name ,'\t\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of receipt02 (Credit)"
        else:
            assert False, "Wrong entry. Unrecognized in account move line."
-
  I check account vouchers of invoices
-
  !python {model: account.invoice}: |
    invoice_ids = self.browse(cr, uid, [ref('account_invoice_customer_invoice01'), ref('account_invoice_customer_invoice02'), ref('account_invoice_customer_invoice03')])
    for invoice in invoice_ids :
        if invoice.amount_total == 100:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state
            assert invoice.state == 'paid' and invoice.residual == 0, "Wrong in Invoice01"
        elif invoice.amount_total == 200:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state
            assert invoice.state == 'paid' and invoice.residual == 0 , "Wrong in Invoice02"
        elif invoice.amount_total == 300:
            print invoice.date_invoice,'\t', invoice.date_due,'\t', invoice.partner_id.name,'\t', invoice.amount_total,'\t',invoice.state
            assert invoice.state == 'paid' and invoice.residual == 0, "Wrong in Invoice03"
        else:
            assert False, "Wrong entry. Unrecognized account invoice."
-
    I check account move line of invoices
-
  !python {model: account.move.line}: |
    receipts_ids=self.pool.get('account.invoice').browse(cr, uid, [ref('account_invoice_customer_invoice01'), ref('account_invoice_customer_invoice02'), ref('account_invoice_customer_invoice03')])
    tuple_receipts=[ receipt.move_id.id for receipt in receipts_ids]
    moves_ids = self.search( cr, uid, [('move_id','in', tuple(tuple_receipts))])
    moves_line = self.browse (cr,uid, moves_ids)
    for move in moves_line :
        if move.debit == 100:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of Invoice01 (Debit)"
        elif move.credit == 100:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice01 (Credit)"
        elif move.debit == 200:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice02 (Debit)"
        elif move.credit == 200:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None  and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice02 (Credit)"
        elif move.debit == 300:
            print move.account_id.name,'\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice03 (Debit)"
        elif move.credit == 300:
            print move.account_id.name,'\t\t',move.name ,'\t', move.date ,'\t', move.debit,'\t', move.credit,'\t', move.reconcile_id.name , '\t', move.reconcile_partial_id.name
            assert move.reconcile_id.name == None  and move.reconcile_partial_id.name == None , "Wrong in account move line of Inovice03 (Credit)"
        else:
            assert False, "Wrong entry. Unrecognized in account move line."
