name: tests

on:
  pull_request:
    branches:
      - "15.0*"
  push:
    branches:
      - "15.0*"

jobs:
  # pre-commit-vauxoo:
  #   runs-on: ubuntu-latest
  #   name: pre-commit-vauxoo
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Cache pre-commit and pip packages
  #       id: cache-pre-commit-pip
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cache/pre-commit
  #           ~/.cache/pip
  #         key: cache-pre-commit-pip
  #     - name: Install pre-commit-vauxoo
  #       run: pip install --upgrade pre-commit-vauxoo
  #     - name: Run pre-commit-vauxoo
  #       run: pre-commit-vauxoo
  # no-dependency-files:
  #   runs-on: ubuntu-latest
  #   name: No dependency files
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Ensure dependency files don't exist
  #       run: |
  #         for reqfile in requirements.txt oca_dependencies.txt ; do
  #             if [ -f ${reqfile} ] ; then
  #                 echo "Please avoid adding requirement files to this repo, because requirements will be installed in all project depending on this one."
  #                 echo "If you need them for test to work, you can use test-${reqfile} instead of ${reqfile}"
  #                 exit 1
  #               fi
  #          done
  build_deployv:
    runs-on: ubuntu-latest
    name: Build Deployv
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Cache pip packages
        id: cache-pip-build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pre-commit
            ~/.cache/pip
          key: cache-pip-build
      - name: Install dependencies
        run: pip install --force-reinstall -U git+https://git.vauxoo.com/vauxoo-dev/gitlab_tools.git@testall-moy
      - name: Build image
        run: >-
          sudo apt-get update &&
          sudo apt-get install dos2unix &&
          source variables.sh &&
          export IMAGE_REPO=${DOCKER_IMAGE_REPO} &&
          export IMAGE_TAG=${CUSTOMER}-${VERSION}-latest &&
          export CI_REPOSITORY_URL=$(git remote get-url origin) &&
          export CI_PROJECT_NAME=${CUSTOMER} &&
          export CI_COMMIT_REF_SLUG=${VERSION} &&
          export {CI_PIPELINE_ID,CI_REPOSITORY_URL,CI_JOB_ID}=123 &&
          export CI_COMMIT_REF_NAME=${GITHUB_REF_NAME} &&
          export CI_PROJECT_NAMESPACE='-dev' &&
          export PRIVATE_DEPLOY_KEY=12345 &&
          echo $CI_PROJECT_NAME &&
          echo $CI_REPOSITORY_URL &&
          echo $IMAGE_TAG &&
          echo $IMAGE_REPO &&
          echo $CI_COMMIT_REF_NAME &&
          echo $CI_COMMIT_REF_SLUG &&
          deployvcmd gitlab_tools check_keys &&
          deployvcmd gitlab_tools build_image  # --push_image

    # artifacts:
    #   paths:
    #     - $CI_COMMIT_REF_NAME

